# greedy_모험가길드.py
# 한 마을에 모험가가 N명 있습니다. 모험가 길드에서는 N명의 모험가를 대상으로 '공포도'를 측정했는데, 
# '공포도'가 높은 모험가는 쉽게 공포를 느껴 제대로 대처할 능력이 떨어집니다.
# 모험가 길드장인 동빈이는 모험가 그룹을 안전하게 구성하고자
# 공포도가 X인 모험가는 반드시 X명 이상으로 구성한 모험가 그룹에 참여해야 여행을 떠날 수 있도록 규정했습니다. 
# N명의 모험가에 대한 정보가 주어졌을 때, 여행을 떠날 수 있는 그룹의 수의 최댓값을 구하는 프로그램 작성

# 예를 들어 N =5 이고, 각 모험가의 공포도가 2 3 1 2 2와 같다고 가정합시다.
# 이 경우 그룹 1에 공포도가 1,2,3 인 모험가를 한 명씩 넣고, 그룹 2에 공포도가 2인 남은 두 명을 넣게 되면 총 2개의 그룹을 넣을 수 있습니다.
# 또한 몇 명의 모험가는 마을에 그대로 남아 있어도 ㅇ되기 때문에, 모든 모험가를 특정 그룹에 넣을 필요는 없습니다.

#[윤진이 아이디어]
# 1. 오름차순 정렬
# 2. '현재 그룹에 포함된 모험가의 수' >= '현재 공포도' -> 그룹

n =int(input())
scary = list(map(int,input().split()))

# 오름차순 정렬
scary.sort()

group_in=0
result=0
for i in scary: # 공포도가 낮은 것 부터 확인한다.
    # 일단 먼저 그룹에 포함시킨다.
    group_in+=1
    # 현재 그룹에 포함된 모험가 수 >= '현재 공포도' => 그룹으로 만든다.
    if group_in >= i:
        result+=1 # 그룹으로 만든다. 
        group_in =0 # 현재 그룹ㅇ- 포함된 모험가 수를 초기화 한다. 

print(result)




