# greedy_1일될때까지.py
# [문제]
# 어떠한 수 N이 1이 될 때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 한다.
# 단, 두번째 연산은 N이 K로 나누어 떨어질 때만 선택할 수 있다.
# 1. N에서 1을 뺀다.
# 2. N을 K로 나눈다.
# 예를 들어 N이 17, K가 4라고 가정하자. 이 때, 1번의 과정을 한 번 수행하면 N은 16이 된다.
# 2번의 과정을 두번 수행하면 N은 1이 된다. 결과적으로 이 경우 전체 과정을 실행한 횟수는 3이 된다. 
# N과 K가 주어질 때, N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 최소 횟수를 구하는 프로그램을 작성해라. 

# [윤진이 해결방법]
# 1. N으로 나누어 떨어질 때 까지 1을 뺀다.
# 2. N으로 나눈다. 
# 3. n=1이 될 때까지 위 과정을 반복한다.

n,k=map(int,input().split())

count = 0

n1=n
k1=k
while n1 != 1:
    if n1%k1 !=0:
        n1-=1
    else: 
        n1= n1 //k1 
    count +=1
print(count)

# # 강사님 해결방법
count1 =0
while True:
    #N이 K로 나누어 떨어지는 수가 될 때까지 뺀다.
    target = (n//k)*k
    count1 += (n-target) # 이만큼 -1함.
    n= target
    # N이 K보다 작을 때, 반복문 탈출
    if n < k:
        break
    # K로 나눈다.
    count1 += 1
    n //= k

# 마지막으로 남은 수에 대하여 1씩 뺀다.
count1 += (n-1)
print(count1)