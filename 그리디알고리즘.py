# 그리디알고리즘.py
# 현재 상황에서 지금 당장 좋은 것만 고르는 방법.
# 일반적인 그리디 알고리즘은 문제를 풀기 위한 최소한의 아이디어를 떠올릴 수 있는 능력을 요구한다.
# 그리디 해법은 그 정당성 분석이 중요하다.
    # 단순히 가장 좋아 보이는 것을 반복적으로 선택해도 최적의 해를 구할 수 있는지 검토한다.

# [문제 상황] 루트 노드 부터 시작하여 거쳐가는 노드 값의 합을 최대로 만들고 싶다. 최적의 해는?
# 일반적인 상황에서 그리디 알고리즘은 최적의 해를 보장할 수 없을 때가 많다.
# 하지만 코딩테스트에서의 대부분 그리디는 탐욕법으로 얻은 해가 최적의 해가 되는 상황에서, 이를 추론할 수 있어야 풀리도록 출제

# [문제]
# 당신은 음식점의 계산을 도와주는 점원입니다. 
# 카운터에는 거스름돈으로 사용할 500,10,,50,10 원짜리 동전히 무한히 존재한다고 가정한다.
# 손님에게 거슬러 주어야 할 돈이 N원일 때, 거슬러 주어야 할 동전의 최소 개수를 구해라
# 단 거슬러 줘야 할 돈 N은 항상 10의 배수이다.

# [아이디어]
# 최적의 해를 구하기 위해 가장 큰 화폐 단위부터 돈을 거슬러 준다. 
# N원을 거슬러 줘야 할 때, 가장 먼저 500원으로 거슬러줄 수 있을 만큼 거슬러 준다.
# 이후에 다른 동전을 차례로 거슬러 줄 수 있을만큼 거슬러 준다.
# [정당성 분석]
# 최적의 해를 보장하는 이유: 큰 단위가 항상 작은 단위의 배수이므로, 작은 단위의 동전들을 종합해 다른 해가 나올 수 없기 때문.
# [시간복잡도 분석]
# 화폐의 종류가 K라고 할 때, 소스코드의 시간복잡도는 O(K) 이다.
# 이 알고리즘의 시간 복잡도는 거슬러줘야 하는 금액과는 무관하며, 동전의 총 종류에만 영향받는다.

n = 1260
count = 0

array = [500,100,50,10]
for coin in array:
    count+= n // coin
    n %= coin
print (count)
