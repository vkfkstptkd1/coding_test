# dfs_기본.py
# DFS: 깊이 우선 탐색. 깊은 부분을 우선적으로 탐색
# 과정
# 1. 탐색 시작 노드를 스택에 삽입하고 방문 처리를 한다.
# 2. 스택의 최상단 노드에 방문하지 않은 인접한 노드가 하나라도 있으면 그 노드를 스택에 넣고, 방문처리한다. 방문하지 않은 인접노드가 없으면 스택에서 최상단 노드를 꺼낸다.
# 3. 더 이상 2번의 과정을 수행할 수 없을 때까지 반복한다.

# 스택 or 재귀 사용/ but 재귀가 더 메모리를 안잡아 먹는다.

# 각 노드가 연결된 정보(그래프)를 표현한다
graph =[
    [], #계산 용이하게 하기위해 index 0을 []로 초기화
    [2,3,8], # 1과 연결된 노드 2,3,8
    [1,7], # 2와 연결된 노드 1,7
    [1,4,5], #3과 연결된 노드 1,4,5
    [3,5], # 4와 연결된 노드 3,5
    [3,4], # 5와 연결된 노드 3,4
    [7], #6과 연결된 노드 7
    [2,6,8], #7과 연결되 노드 2,6,8
    [1,7] # 8과 연결된 노드
]
#각 노드가 방문된 정보를 표현한다. 1차원 리스트
visited=[False]*9 
def dfs(graph, v, visited):
    # 현재 노드 방문 처리
    visited[v] = True
    print(v, end=' ')
    # 현재 노드와 연결된 다른 노드를 재귀적으로 방문
    for i in graph[v]:
        if not visited[i]:
            dfs(graph, i, visited)

dfs(graph,1,visited)
