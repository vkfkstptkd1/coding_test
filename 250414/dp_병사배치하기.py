# dp_병사배치하기.py
# N명의 병사가 무작위로 나열되어있습니다.
# 각 병사는 특정한 값의 전투력을 보유하고 있습니다.
# 병사를 배치할 때는 전투력이 높은 병사가 앞쪽에 오도록 내림차순으로 배치를 하고자 합니다.
# 다시말해 앞쪽에 있는 병사의 전투력이 항상 뒤쪽에 있는 병사보다 높아야합니다.
# 또한 배치 과정에서는 특정한 위치에 있는 병사를 열외시키는 방법을 이용합니다.
# 그러면서도 남아 있는 병사의 수가 최대가 되도록 하고 싶습니다.

# 입력조건: 첫째 줄에 N이 주어집니다. (1<=N<=2000) 뚤째 줄의 각 병사의 전투력이 공백으로 구분되어 차례대로 주어집니다.
# 각 병사의 전투력은 10,000,000보다 작거나 같은 자연수 입니다.
# 출력조건: 첫째 줄에 남아있는 병사의 수가 최대가 되도록 하기 위해서 열외시켜야 하는 병사의 수를 출력합니다.

# 예시
# 입력
# 7
# 15 11 4 8 5 2 4 
# 출력
# 2

# 문제 해결 아이디어
# 가장 긴 증가하는 부분 수열 알고리즘 (LIS)를 확인하자.
# D[i] = array[i]를 마지막 원소로 가지는 부분 수열의 최대 길이
# 점화식 
# 모든 0<=j<i에 대하여, D[i] = max(D[i], D[j]+1) if array[j] < array[i]

n = int(input())
array = list(map(int,input().split()))

# 순서뒤집어 LIS 문제로 변환
array.reverse()
#DP를 위한 
dp=[1]*n

for i in range (1,n):
    for j in range(0,i):
        if array[j] < array[i]:
            dp[i] = max(dp[i],dp[j]+1)

print(n-max(dp))