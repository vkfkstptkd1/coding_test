# dfs_음료수 얼려먹기.py
# n*m크기의 얼음 틀이 있습니다. 구멍이 뚫려있는 부분 :0, 칸막이 존재하는 부분:1
# 구멍이 뚫려잇는 부분끼리 상,하,좌,우 붙어있는 경우 서로 연결되어 있는것으로 간주.
# 총 아이스크림의 개수는? 
# 00110
# 00011
# 11111
# 00000 
# 위 예시의 경우 총 3개이다.
# 입력은 세로 n, 가로 m, 두번째 줄부터 n+1줄 까지 얼음틀의 형태
# 출력은 한번에 만들 수 있는 아이스크림의 개수 출력

# 1. n, m을 공백을 기준으로 구분하여 입력을 받는다. 
n,m=map(int,input().split())

# 2. 2차원 리스트의 맵 정보 입력을 받는다.
graph = []
for i in range(n):
    graph.append(list(map(int,input())))

# 3. 모든 노드(위치)에 대하여 아이스크림을 채운다.
result=0
for i in range(n):
    for j in range(m):
        if dfs(i,j) == True:
            result +=1

# DFS로 특정 노드를 방문하고, 연결된 모든 노드들도 방문.
def dfs(x,y):
    #주어진 범위를 벗어나면 즉시 종료
    if x<=-1 or y<=-1 or x>=n or y>=m:
        return false
    # 현재 노드를 아직 방문하지 않았따면
    if graph[x][y] ==0:
        # 해당 노드를 방문 처리한다.
        graph[x][y] =1
        # 상, 하, 좌, 우 위치들도 모두 재귀적으로 호출한다.
        # 이렇게 되면 모든 인접 노드들을 1로 바꿀 수 있다.
        dfs(x-1,y)
        dfs(x,y-1)
        dfs(x+1,y)
        dfs(x,y+1)
        return True
    return false
# 정답 출력
print(result)

#알고리즘
# 1. 특정 지범의 주변 상,하,좌,우 를 살펴본 뒤에 주변 지점 중에서 값이 '0'이면서 아직 방문하지 않은 지점이 있다면 해당 지점을 방문
# 2. 방문한 지점에서 다시 상,하,좌,우를 살펴보면서 방문을 진행하는 과정을 반복하면, 연결된 모든 지점을 방문할 수 있다.
# 3. 모든 노드에 대하여 1~2번의 과정을 반복하며, 방문하지 않은 지점의 수를 카운트 한다.